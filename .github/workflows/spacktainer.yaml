---
name: Build Spacktainers
on:
  pull_request:
    types: [labeled]
jobs:
  matrix:
    if: ${{ github.event.label.name == 'build' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: clone repo
        uses: actions/checkout@v4
      - id: set-matrix
        run: |-
          SPACKTAINERS=$(echo $(cat .github/workflows/matrix.json) | sed 's/ //g')
          echo "matrix=${SPACKTAINERS}" >> "${GITHUB_OUTPUT}"
  builder-container-job:
    if: ${{ github.event.label.name == 'build-with-base' }}
    environment: sandbox-hpc
    runs-on:
      - codebuild-spacktainers-tf-${{ github.run_id }}-${{ github.run_attempt }}
      - instance-size:small
    steps:
      - name: clone repo
        uses: actions/checkout@v4
      - name: create builder
        uses: ./.github/actions/build_container
        with:
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
          AWS_ECR_PATH: /spacktainers/builder
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_PATH: /openbraininstitute/spack-builder
          BUILD_PATH: builder
          BUILDAH_EXTRA_ARGS: --label org.opencontainers.image.revision="$GITHUB_SHA"
            --label org.opencontainers.image.authors="$GITHUB_TRIGGERING_ACTOR" --label
            org.opencontainers.image.url="https://github.com/${GITHUB_REPOSITORY}"
            --label org.opencontainers.image.source="https://github.com/${GITHUB_REPOSITORY}"
            --label ch.epfl.bbpgitlab.ci-pipeline-url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            --label ch.epfl.bbpgitlab.ci-commit-branch="$GITHUB_REF_NAME" --build-arg
            SPACK_BRANCH=develop
         # ' --label org.opencontainers.image.created="$CI_JOB_STARTED_AT"'
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          SPACK_DEPLOYMENT_KEY_PUB: ${{ secrets.SPACK_DEPLOYMENT_KEY_PUB }}
          SPACK_DEPLOYMENT_KEY_PRIVATE: ${{ secrets.SPACK_DEPLOYMENT_KEY_PRIVATE }}
  runtime-container-job:
    if: ${{ github.event.label.name == 'build-with-base' }}
    environment: sandbox-hpc
    runs-on:
      - codebuild-spacktainers-tf-${{ github.run_id }}-${{ github.run_attempt }}
      - instance-size:small
    steps:
      - name: clone repo
        uses: actions/checkout@v4
      - name: create runtime
        uses: ./.github/actions/build_container
        with:
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
          AWS_ECR_PATH: /spacktainers/runtime
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_PATH: /openbraininstitute/spack-runtime
          BUILD_PATH: runtime
          BUILDAH_EXTRA_ARGS: --label org.opencontainers.image.revision="$GITHUB_SHA"
            --label org.opencontainers.image.authors="$GITHUB_TRIGGERING_ACTOR" --label
            org.opencontainers.image.url="https://github.com/${GITHUB_REPOSITORY}"
            --label org.opencontainers.image.source="https://github.com/${GITHUB_REPOSITORY}"
            --label ch.epfl.bbpgitlab.ci-pipeline-url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            --label ch.epfl.bbpgitlab.ci-commit-branch="$GITHUB_REF_NAME" --build-arg
            SPACK_BRANCH=develop
         # ' --label org.opencontainers.image.created="$CI_JOB_STARTED_AT"'
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          SPACK_DEPLOYMENT_KEY_PUB: ${{ secrets.SPACK_DEPLOYMENT_KEY_PUB }}
          SPACK_DEPLOYMENT_KEY_PRIVATE: ${{ secrets.SPACK_DEPLOYMENT_KEY_PRIVATE }}
  spacktainer-build-job:
    if: ${{ contains(github.event.label.name, 'build') && ! failure() && ! cancelled() }}
    environment: sandbox-hpc
    strategy:
      matrix:
        spacktainer: ${{ fromJson(needs.matrix.outputs.matrix) }}
    runs-on:
      - codebuild-spacktainers-tf-${{ github.run_id }}-${{ github.run_attempt }}
    continue-on-error: true
    needs: [builder-container-job, runtime-container-job, matrix]
    steps:
      - name: clone repo
        uses: actions/checkout@v4
      - name: prepare to build container
        env:
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
        run: |-
          cd container_definitions/amd64/${{ matrix.spacktainer }}
          cat << EOF > Dockerfile
          FROM ${AWS_ECR_URL}/spacktainers/builder:latest AS builder
          FROM ${AWS_ECR_URL}/spacktainers/runtime:latest

          # Triggers building the 'builder' image, otherwise it is optimized away
          COPY --from=builder /etc/debian_version /etc/debian_version
          EOF
          if [[ -f Dockerfile.epilogue ]]; then
          cat Dockerfile.epilogue >> Dockerfile
          fi
      - name: build ${{ matrix.spacktainer }}
        uses: ./.github/actions/build_container
        with:
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
          AWS_ECR_PATH: /spacktainers/${{ matrix.spacktainer }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_PATH: /openbraininstitute/spack-${{ matrix.spacktainer }}
          BUILD_PATH: container_definitions/amd64/${{ matrix.spacktainer }}
          BUILDAH_EXTRA_ARGS: --label org.opencontainers.image.revision="$GITHUB_SHA"
            --label org.opencontainers.image.authors="$GITHUB_TRIGGERING_ACTOR" --label
            org.opencontainers.image.url="https://github.com/${GITHUB_REPOSITORY}"
            --label org.opencontainers.image.source="https://github.com/${GITHUB_REPOSITORY}"
            --build-arg SPACK_BRANCH=develop --build-arg CACHE_BUCKET=${{ secrets.AWS_CACHE_BUCKET }}
            --build-arg MIRROR_AUTH_ARG="\"--s3-access-key-id='${{ secrets.AWS_CACHE_ACCESS_KEY_ID }}
            --s3-access-key-secret=${{ secrets.AWS_CACHE_SECRET_ACCESS_KEY }}'\""
          # ' --label org.opencontainers.image.created="$CI_JOB_STARTED_AT"'
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          SPACK_DEPLOYMENT_KEY_PUB: ${{ secrets.SPACK_DEPLOYMENT_KEY_PUB }}
          SPACK_DEPLOYMENT_KEY_PRIVATE: ${{ secrets.SPACK_DEPLOYMENT_KEY_PRIVATE }}
  convert-to-singularity:
    if: ${{ always() && needs.spacktainer-build-job.result == 'success' && contains(github.event.label.name, 'build') }}
    environment: sandbox-hpc
    runs-on: ubuntu-latest
    needs: [spacktainer-build-job, matrix]
    strategy:
      matrix:
        spacktainer: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Install singularity
        run: |-
          sudo wget -O- http://neuro.debian.net/lists/xenial.us-ca.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
          sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9
          sudo apt-get update
          sudo apt-get install -y build-essentials libssl-dev uuid-dev libgpgme11-dev squashfs-tools libseccomp-dev pkg-config
          sudo apt-get install -y singularity-container
          singularity --version
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key-id: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Authenticate with ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Convert container
        run: |-
          export SINGULARITY_DOCKER_USERNAME=${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          export SINGULARITY_DOCKER_PASSWORD=${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          singularity pull --no-https "${{ matrix.spacktainer }}.sif" "docker://${{ secrets.AWS_ECR_URL }}/spacktainers/${{ matrix.spacktainer }}:latest"
      - name: Drop container in S3 bucket
        uses: keithweaver/aws-s3-github-action@v1.0.0
        with:
          command: cp
          source: ./${{ matrix.spacktainer }}.sif
          destination: s3://${{ secrets.S3_SINGULARITY_BUCKET }}/${{ vars.S3_CONTAINER_ROOT
            }}/${{ matrix.spacktainer }}.sif
          aws_access_key_id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws_region: ${{ vars.AWS_REGION }}
